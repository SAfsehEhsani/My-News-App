// lib/models/article.dart

import 'package:hive/hive.dart'; // Import Hive

// This part is generated by build_runner later
part 'article.g.dart'; // Specifies that build_runner should generate this file

// Define the Article class, annotated for Hive
@HiveType(typeId: 0) // Assign a unique typeId (0 or higher)
class Article extends HiveObject { // Extend HiveObject for convenient methods like save() and delete()
  @HiveField(0) // Assign a unique field index (0 or higher)
  final String? title;

  @HiveField(1)
  final String? description;

  @HiveField(2)
  final String? url; // URL to the full article

  @HiveField(3)
  final String? urlToImage; // URL for the thumbnail image

  @HiveField(4)
  final String? publishedAt; // Original published date string from API

  @HiveField(5)
  final String? sourceName; // Name of the news source

  // We can add more fields if the API provides them and we need them

  Article({
    required this.title,
    required this.description,
    required this.url,
    required this.urlToImage,
    required this.publishedAt,
    required this.sourceName,
  });

  // Factory constructor to create an Article from JSON data (from API)
  factory Article.fromJson(Map<String, dynamic> json) {
    return Article(
      // Use null check operators or default values as API might return null
      title: json['title'] as String? ?? 'No Title',
      description: json['description'] as String? ?? 'No Description',
      url: json['url'] as String? ?? '', // URL is important, maybe default to empty string
      urlToImage: json['urlToImage'] as String? ?? '', // Default to empty string for no image
      publishedAt: json['publishedAt'] as String? ?? '',
      sourceName: json['source'] != null && json['source']['name'] != null
          ? json['source']['name'] as String? ?? 'Unknown Source'
          : 'Unknown Source',
    );
  }

  // Optional: Implement equals and hashCode for checking if two Article objects are the same
  // Useful for checking if an article is already in bookmarks
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Article && runtimeType == other.runtimeType && url == other.url; // Use a unique field like url

  @override
  int get hashCode => url.hashCode; // Generate hashCode based on the unique field
}